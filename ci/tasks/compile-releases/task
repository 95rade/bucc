#!/usr/bin/env bash

set -e
set -o pipefail

SPRUCE_VERSION=1.9.0

curl -L >/usr/local/bin/spruce https://github.com/geofffranks/spruce/releases/download/v${SPRUCE_VERSION}/spruce-linux-amd64 && chmod 0755 /usr/local/bin/spruce

curl -L >/usr/local/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 && chmod 755 /usr/local/bin/jq

curl -L >/usr/local/bin/bosh https://s3.amazonaws.com/bosh-cli-artifacts/bosh-cli-2.0.10-linux-amd64 && chmod 755 /usr/local/bin/bosh

generate_compile_manifest() {
    mkdir -p state
    echo "virtualbox" > state/cpi
    echo "foo: bar" > vars.yml
    ops=$(find ops/cpis/*/*.yml | grep -v virtualbox | sed 's/^/-o /' | xargs)
    already_compiled_releases=$(spruce json <(echo "releases:"; ./bin/bucc int ${ops} --path /releases))

    find ops -name "*compiled-release*" -exec mv {} {}.tmp \;
    ops=$(find ops/cpis/*/*.yml | grep -v virtualbox | sed 's/^/-o /' | xargs)
    releases=$(spruce json <(echo "releases:"; ./bin/bucc int ${ops} --path /releases))

    compiled_relases_candidates=$(echo ${releases} | jq '.releases[] | select(.url | contains("ubuntu-trusty") | not)')
    stemcell_version=$(echo ${releases} | jq '.releases[0].url' | cut -d- -f8)

    releases_to_compile="releases:\n"
    for release in $(echo ${compiled_relases_candidates} | jq -c '.'); do
        name=$(echo ${release} | jq -r '.name')
        version=$(echo ${release} | jq -r '.version')
        compiled_release_url=$(echo ${already_compiled_releases} | jq --arg name "${name}" '.releases[] | select(.name | contains($name)).url')

        # Compiled cpi releases are not yet supported
        # https://github.com/cloudfoundry/bosh-cli/issues/239#issuecomment-307197103
        if [[ "${name}" == *cpi* ]]; then
            continue
        fi
        if [[ ${compiled_release_url} != *"${version}"*"${stemcell_version}"* ]]; then
          releases_in_s3=$(curl -s "https://s3-eu-west-1.amazonaws.com/bucc-compiled-releases/?prefix=${name}")
          if [[ ${releases_in_s3} != *"${version}-ubuntu-trusty-${stemcell_version}"* ]]; then
            releases_to_compile+="- $( echo ${release} | jq -c '.version = "latest"' )\n"
          fi
        fi
    done

    cat > manifest.yml <<EOF
---
name: bucc-compiled-releases
stemcells:
- alias: large
  os: ubuntu-trusty
  version: ${stemcell_version}
update:
  canaries: 1
  max_in_flight: 1
  canary_watch_time: 1000 - 90000
  update_watch_time: 1000 - 90000
instance_groups: []
EOF

    bosh int <(echo -e ${releases_to_compile}) >> manifest.yml
}

export_releases() {
    for release in $(bosh releases --json | jq -r '.Tables[0].Rows[] | (.[0] + "/" + .[1])' | sed 's/\*//g'); do
        name=$(echo ${release} | cut -d'/' -f1 )
        bosh export-release -d bucc-compiled-releases ${release} ubuntu-trusty/${1}
        mv ${name}*.tgz $( echo ${name}*.tgz | sed "s/\.tgz$/-$( date -u +%Y%m%d%H%M%S ).tgz/" )
    done
}

pushd bucc > /dev/null
generate_compile_manifest
echo "Genereated compile manifest:"
cat manifest.yml
echo ""

if bosh int manifest.yml --path /releases/0 > /dev/null; then
    start-bosh
    source /tmp/local-bosh/director/env

    version=$(bosh int manifest.yml --path /stemcells/0/version)
    bosh upload-stemcell "https://bosh.io/d/stemcells/bosh-warden-boshlite-ubuntu-trusty-go_agent?v=${version}"

    bosh -n deploy -d bucc-compiled-releases manifest.yml
    popd > /dev/null

    pushd compiled-releases > /dev/null
    export_releases ${version}
    popd > /dev/null
else
    echo "Nothing to compile"
fi
