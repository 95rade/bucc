meta:
  name:     (( param "Please name your pipeline" ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  pipeline: bucc

  bosh_lite:
    target:     (( param "Please specify the BOSH target URI for the bosh-lite to run test deployments against" ))
    deployment: (( param "Please specify the name of the local bosh-lite (warden) deployment" ))
    ca_cert:    (( param "Please specify the ca certificate of the local bosh-lite (warden) deployment" ))
    static_ip:  (( param "Static IP in the warden network range which is free" ))
    username:   admin
    password:   admin

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token and specify it here" ))

  slack:
    webhook:       (( param "Please specify your Slack Incoming Webhook Integration URL" ))
    notification: '(( concat ":sadpanda: " meta.pipeline " build failed!<br>URL-GOES-HERE" ))'
    channel:       (( param "Please specify the channel (#name) or user (@user) to send messages to" ))
    username:      concourse
    icon:          http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
    fail_moji:     ":airplane_arriving:"
    success_moji:  ":airplane_departure:"
    upset_moji:    ":sad_panda:"
    fail_url: '(( concat "<" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Concourse Failure! " meta.slack.upset_moji ">" ))'

  url: (( param "What is the URL for the Concourse instance this pipeline is located on?" ))

groups:
  - name: (( grab meta.pipeline ))
    jobs:
      - sanity-check
      - test
      - rc
      - shipit
      - major
      - minor
      - bump-patch

jobs:
  - name: sanity-check
    public: true
    serial: true
    plan:
      - do:
        - aggregate:
          - { get: bucc, trigger: true }
          - { get: bucc-ci }
        - task: bucc-manifests
          file: bucc-ci/ci/tasks/bucc-manifests/task.yml
          
        # on_failure:
        #   put: notify
        #   params:
        #     channel:  (( grab meta.slack.channel ))
        #     username: (( grab meta.slack.username ))
        #     icon_url: (( grab meta.slack.icon ))
        #     text:    '(( concat meta.slack.fail_url " " meta.pipeline ": test job failed" ))'

  - name: test
    public: true
    serial: true
    plan:
      - do:
        - aggregate:
          - { get: bucc, passed: [sanity-check] }
          - { get: bucc-ci }
        - task: bucc-manifests
          file: bucc-ci/ci/tasks/bucc-manifests/task.yml
          params:
            VARS: 
              internal_ip: 10.244.0.46
              vcenter_cluster: test
              vcenter_dc: test
              vcenter_disks: test
              vcenter_dns: test
              vcenter_ds: test
              vcenter_ip: test
              vcenter_password: test
              vcenter_rp: test
              vcenter_templates: test
              vcenter_user: test
              vcenter_vms: test
        # Workaround for: https://github.com/cloudfoundry/bosh-deployment-resource/issues/14
        - task: bosh-int-manifest
          config:
            platform: linux
            image_resource: { type: docker-image, source: { repository: relintdockerhubpushbot/bosh-cli } } 
            inputs: [ name: bucc-generated-manifest, name: bucc, name: bucc-ci ]
            outputs: [ name: bosh-int-manifest ]
            run:
              path: sh
              args: 
                - -exc
                - |
                  bosh int bucc-generated-manifest/vsphere-lite.yml \
                    --ops-file bucc/dev/bosh-dev.yml > \
                    bosh-int-manifest/manifest.yml
        - task: download-bucc-stemcell
          file: bucc-ci/ci/tasks/download-bucc-stemcell/task.yml
          params:
            CPI: warden-boshlite
        - put: bosh-lite
          params:
            manifest: bosh-int-manifest/manifest.yml
            stemcells:
              - bucc-stemcell/bosh-*

  - name: rc
    public: true
    plan:
      - do:
        - aggregate:
            - { get: bucc,    trigger: true,  passed: [test] }
            - { get: version, trigger: true, params: {pre: rc} }
        - put: version
          params: {file: version/number}
        # on_failure:
        #   put: notify
        #   params:
        #     channel:  (( grab meta.slack.channel ))
        #     username: (( grab meta.slack.username ))
        #     icon_url: (( grab meta.slack.icon ))
        #     text:    '(( concat meta.slack.fail_url " " meta.pipeline ": rc job failed" ))'

  - name: bump-patch
    public: true
    plan:
      - do:
        - { get: version, trigger: true, params: { bump: patch, pre: rc }, passed: [shipit] } # bump rc + patch, so that subesquent version bumps can trigger a new bump-patch
        - { put: version,                params: { file: version/number} }
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": bump-patch job failed" ))'

  - name: minor
    public: true
    plan:
      - do:
        - { get: version, trigger: false, params: {bump: minor} }
        - { put: version,                 params: {file: version/number} }
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": minor job failed" ))'

  - name: major
    public: true
    plan:
      - do:
        - { get: version, trigger: false, params: {bump: major} }
        - { put: version,                 params: {file: version/number} }
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:    '(( concat meta.slack.fail_url " " meta.pipeline ": major job failed" ))'

  - name: shipit
    public: true
    serial: true
    plan:
      - do:
        - name: inputs
          aggregate:
            - { get: version, passed: [rc], params: {bump: final} }
            - { get: bucc,    passed: [rc] }
        # - name: release
        #   task: release
        #   config:
        #     rootfs_uri: (( grab meta.image ))
        #     platform: linux
        #     inputs:
        #       - name: version
        #       - name: git
        #     outputs:
        #       - name: gh
        #       - name: pushme
        #     run:
        #       path: "git/ci/scripts/shipit"
        #       args: []
        #     params:
        #       BIN_DIR: (( grab meta.bin_dir ))
        #       BINARIES: (( grab meta.binaries ))
        #       REPO_ROOT: git
        #       VERSION_FROM: version/number
        #       RELEASE_NAME: (( grab meta.release ))
        #       RELEASE_ROOT: gh
        #       REPO_OUT:     pushme
        #       BRANCH:       (( grab meta.github.branch ))
        - name: version
          put: version
          params: { bump: final }
        - name: bucc
          put: bucc
          params:
            rebase: true
            repository: pushme/git
        - name: github
          put: github
          params:
            name:   gh/name
            tag:    gh/tag
            body:   gh/notes.md
            globs: [gh/artifacts/*]
        # on_failure:
        #   put: notify
        #   params:
        #     channel:  (( grab meta.slack.channel ))
        #     username: (( grab meta.slack.username ))
        #     icon_url: (( grab meta.slack.icon ))
        #     text:    '(( concat meta.slack.fail_url " " meta.pipeline ": shipit job failed" ))'

resource_types:
  - name: bosh-deployment
    type: docker-image
    source:
      repository: cloudfoundry/bosh-deployment-resource
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource

resources:
  - name: bucc
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))
      ignore_paths: [ci/*]      
      submodules: all

  - name: bucc-ci
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))
      paths: [ci/*]

  - name: version
    type: semver
    source :
      driver: git
      uri: (( grab meta.github.uri ))
      private_key: (( grab meta.github.private_key ))
      branch: version
      file: version
      initial_version:   (( grab meta.initial_version || "0.0.1" ))

  - name: notify
    type: slack-notification
    source:
      url: (( grab meta.slack.webhook ))

  - name: github
    type: github-release
    source:
      user:         (( grab meta.github.owner ))
      repository:   (( grab meta.github.repo ))
      access_token: (( grab meta.github.access_token ))

  - name: bosh-lite
    type: bosh-deployment
    source:
      deployment: bosh
      target: (( grab meta.bosh_lite.target ))
      client: (( grab meta.bosh_lite.username ))
      client_secret: (( grab meta.bosh_lite.password ))
      ca_cert: (( grab meta.bosh_lite.ca_cert ))
